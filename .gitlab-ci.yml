before_script:
  - apt-get update -qq
  - apt-get install -qq git
  # Setup SSH deploy keys
  - 'which ssh-agent || ( apt-get install -qq openssh-client )'
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

stages:
  - preparacao
  - building
  - testing
  - security
cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"

composer:
  image: composer:1.8
  stage: preparacao
  script:
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_PROJECT_TITLE
    - echo $CI_PROJECT_DIR
    - pwd
    - whoami
    - composer --version
    - php --version
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - cp .env.example .env
    - php artisan key:generate
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - vendor/
      - .env
    expire_in: 1 days
    when: always
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - vendor/

npm:
  image: node:10.16.3
  stage: preparacao
  script:
    - npm -v
    - npm install
    - npm run dev
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - node_modules/
      - public/css/
      - public/js/
      - public/fonts/
      - public/mix-manifest.json
    expire_in: 1 days
    when: always
  cache:
    key: ${CI_COMMIT_REF_SLUG}-npm
    paths:
      - node_modules/
#
build-assets:
  stage: building
  # Download the artifacts for these jobs
  dependencies:
    - composer
    - npm
  script:
    - npm --version
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 1 days
    when: always

#db-seeding:
#  stage: building
#  services:
#    - name: mysql:8.0
#      command: ["--default-authentication-plugin=mysql_native_password"]
#  # Download the artifacts for these jobs
#  dependencies:
#    - composer
#    - yarn
#  script:
#    - mysql --version
#    - php artisan migrate:fresh --seed
#    - mysqldump --host="${DB_HOST}" --user="${MYSQL_USER}" --password="${MYSQL_PASSWORD}" "${MYSQL_DATABASE}" > db.sql
#  artifacts:
#    paths:
#      - storage/logs # for debugging
#      - db.sql
#    expire_in: 1 days
#    when: always

#phpunit:
#  stage: testing
#  services:
#    - name: mysql:8.0
#      command: ["--default-authentication-plugin=mysql_native_password"]
#  # Download the artifacts for these jobs
#  dependencies:
#    - build-assets
#    - composer
#    - db-seeding
#  script:
#    - php -v
#    - sudo cp /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini /usr/local/etc/php/conf.d/docker-php-ext-xdebug.bak
#    - echo "" | sudo tee /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
#    - mysql --host="${DB_HOST}" --user="${MYSQL_USER}" --password="${MYSQL_PASSWORD}" "${MYSQL_DATABASE}" < db.sql
#    - ./vendor/phpunit/phpunit/phpunit --version
#    - php -d short_open_tag=off ./vendor/phpunit/phpunit/phpunit -v --colors=never --stderr
#    - sudo cp /usr/local/etc/php/conf.d/docker-php-ext-xdebug.bak /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
#  artifacts:
#    paths:
#      - ./storage/logs # for debugging
#    expire_in: 1 days
#    when: on_failure

#codestyle:
#  stage: testing
#  image: lorisleiva/laravel-docker
#  script:
#    - phpcs --extensions=php app
#  dependencies: []

#phpcpd:
#  stage: testing
#  script:
#    - test -f phpcpd.phar || curl -L https://phar.phpunit.de/phpcpd.phar -o phpcpd.phar
#    - php phpcpd.phar app/ --min-lines=50
#  dependencies: []
#  cache:
#    paths:
#      - phpcpd.phar
#
#sensiolabs:
#  stage: security
#  script:
#    - test -d security-checker || git clone https://github.com/sensiolabs/security-checker.git
#    - cd security-checker
#    - composer install
#    - php security-checker security:check ../composer.lock
#  dependencies: []
#  cache:
#    paths:
#      - security-checker/
